/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.math.BigInteger;
import java.util.*;
/**
 *
 * @author jt2-friend
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Factorise");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        timeStart();
        dixonFactorise(new BigInteger(jTextField1.getText()));
        timeStop("showTime");
//        String s[] =  {"224573",
//                        "299203",
//                        "1963867",
//                        "6207251",
//                        "14674291",
//                        "23128513",
//                        "254855791",
//                        "428279361",
//                        "159649552547",
//                        "189061250479",
//                        "2211744201787",
//                        "7828669742987",
//                        "48560209712519",
//                        "35872004189003",
//                        "737785058178599",
//                        "576460921650883",
//                        "1957432135202107",
//                        "2450609331732137"};
//      
//        for(int i = 0; i < 18; i++) {
//            timeStart();
//            dixonFactorise(new BigInteger(s[i]));
//            timeStop("showTime");
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    //dixonFactorise
    //Params  : BigInteger val
    //Returns : void
    //Desc    : Factorises an input value with Dixon Algorithm
    public void dixonFactorise(BigInteger val) {
        
        BigInteger n, b, poss, x, xSqrd;
        n = val;
        
        x = new BigInteger(String.valueOf(getIntSqrt(val)));
        b = new BigInteger("1");
        x = x.add(b);
        
        int smoothNums[] = {2,3,5,7};
        int smoothCalcPowSet1[] = {0,0,0,0};
        int smoothCalcPowSet2[] = {0,0,0,0};

        List<String> possSmoothList = new ArrayList<String>();
        List<String> xSet = new ArrayList<String>();
        
        outerloop:
        for (int i = 0; i < 100000000; i++){
            xSqrd = x.multiply(x);
            poss = xSqrd.mod(n);
            innerloop:
            //loop through to find all 7 smooth numbers
            for (int sevenPow = 0; sevenPow < 10 ; sevenPow++) {
                for (int fivePow = 0; fivePow < 10 ; fivePow++) {
                    for (int threePow = 0; threePow < 10 ; threePow++) {
                        for (int twoPow = 0; twoPow < 10 ; twoPow++) {
                            //Calculate value of smooth 7 number
                            double calc = Math.pow(smoothNums[0], twoPow) * 
                                          Math.pow(smoothNums[1], threePow) *
                                          Math.pow(smoothNums[2], fivePow) *
                                          Math.pow(smoothNums[3], sevenPow);
                            
                            int calcInt = (int) calc;
                            //if smooth number is equal to x^2 mod n ...add to list of possible powers
                            if (BigInteger.valueOf(calcInt).equals(poss)) {
                                possSmoothList.add(String.valueOf(twoPow) +
                                               String.valueOf(threePow) +
                                               String.valueOf(fivePow) +
                                               String.valueOf(sevenPow));
                                xSet.add(String.valueOf(x));
                                
                                if (possSmoothList.size() > 1) {
                                    //loop through the list to and compare
                                    for (int m = 0; m < possSmoothList.size(); m++) {
                                            int pow2Init = Character.getNumericValue(Integer.valueOf(possSmoothList.get(m).charAt(0)));
                                            int pow3Init = Character.getNumericValue(Integer.valueOf(possSmoothList.get(m).charAt(1)));
                                            int pow5Init = Character.getNumericValue(Integer.valueOf(possSmoothList.get(m).charAt(2)));
                                            int pow7Init = Character.getNumericValue(Integer.valueOf(possSmoothList.get(m).charAt(3)));
                                            int x1Poss = Integer.valueOf(xSet.get(m));
                                        for (int l = m+1; l < possSmoothList.size(); l++) {
                                            int pow2ToComp = Character.getNumericValue(Integer.valueOf(possSmoothList.get(l).charAt(0)));
                                            int pow3ToComp = Character.getNumericValue(Integer.valueOf(possSmoothList.get(l).charAt(1)));
                                            int pow5ToComp = Character.getNumericValue(Integer.valueOf(possSmoothList.get(l).charAt(2)));
                                            int pow7ToComp = Character.getNumericValue(Integer.valueOf(possSmoothList.get(l).charAt(3)));
                                            int x2Poss = Integer.valueOf(xSet.get(l));
                                            //if powers add to give even outcomes
                                            if (((pow2Init + pow2ToComp) % 2 == 0) &&
                                                ((pow3Init + pow3ToComp) % 2 == 0) &&
                                                ((pow5Init + pow5ToComp) % 2 == 0) &&
                                                ((pow7Init + pow7ToComp) % 2 == 0)) {
                                                
                                                smoothCalcPowSet1[0] = pow2Init;
                                                smoothCalcPowSet1[1] = pow3Init;
                                                smoothCalcPowSet1[2] = pow5Init;
                                                smoothCalcPowSet1[3] = pow7Init;
                                                
                                                smoothCalcPowSet2[0] = pow2ToComp;
                                                smoothCalcPowSet2[1] = pow3ToComp;
                                                smoothCalcPowSet2[2] = pow5ToComp;
                                                smoothCalcPowSet2[3] = pow7ToComp;
                                                //check if the factors are correct
                                                if (checkFactorsAreCorrect(smoothNums, smoothCalcPowSet1, smoothCalcPowSet2,  x1Poss, x2Poss, n)) {
                                                    break outerloop;
                                                }
                                            }
                                        }
                                    }
                                }
                            } 
                        }
                    }
                }
            }

            x = x.add(b);
        }
    }
    
    
    long timer = 0;

    void timeStart() {
        timer = System.currentTimeMillis();
    }

    void timeStop(String s) {
        timer = System.currentTimeMillis() - timer;
        if(s.equals("showTime")) {
            jTextArea1.append("Time taken is " + timer/1000 + " seconds" + timer +"milliseconds\n");
        }
    } 
    
    //checkFactorsAreCorrect
    //Params  : int[] smoothNums, int[] smoothCalcPowSet1, int[] smoothCalcPowSet2, int x1, int x2, BigInteger n
    //Returns : bool
    //Desc    : Calculates gcd to find factors of value n
    public boolean checkFactorsAreCorrect(int[] smoothNums, int[] smoothCalcPowSet1, int[] smoothCalcPowSet2, int x1, int x2, BigInteger n) {
        int gcd = 1;
        BigInteger BigFactor1, BigFactor2;
        int smoothCalcPow[] = {0,0,0,0};
        
        //calculate x
        int x = x1 * x2;
        
        //Add powers of values
        for (int i = 0; i < 4 ; i++) {
            smoothCalcPow[i] = smoothCalcPowSet1[i] + smoothCalcPowSet2[i];
        }

        //Squareroot the value
        for (int i = 0; i < 4 ; i++) {
            gcd *= (int)Math.sqrt(Math.pow(smoothNums[i], (smoothCalcPow[i])));
        }

        //Generate factors before gcd
        BigFactor1 = BigInteger.valueOf(x - gcd);
        BigFactor2 = BigInteger.valueOf(x + gcd);
        
        //Use Greatest common divisor to calculate final factors
        BigFactor1 = BigFactor1.gcd(n);
        BigFactor2 = BigFactor2.gcd(n);
        
        //print factors
        System.out.println("Factor 1 : " + BigFactor1);
        System.out.println("Factor 2 : " + BigFactor2);
        
        return true;
    }
    
    /*  printArray
    * Params : int[] arr
    * Returns : void
    * Desc : prints array to terminal, useful for testing
    */
    public void printArray(int[] arr) {
        for (int i = 0; i < (arr.length); i++) {
            System.out.println(arr[i]);
        }
    }

    //perfectSquare
    //Params  : BigInteger A
    //Returns : BigInteger
    //Desc    : Checks if value inputted is a square number
    public Boolean perfectSquare(BigInteger A) {
        Boolean p = false;
        BigInteger B = getIntSqrt(A);
        BigInteger C = B.multiply(B);
        if (C.equals(A)){
            p = true;
        }
        
        return p;
    }

    /*Source: Blackboard -> Learning materials*/
    //getIntSqrt
    //Params  : BigInteger x
    //Returns : BigInteger
    //Desc    : squareroots big integers
    
    public BigInteger getIntSqrt(BigInteger x){
        BigInteger s; // final result 
        BigInteger currentRes = BigInteger.valueOf(0); // init value is 0
        BigInteger currentSum = BigInteger.valueOf(0); // init value is 0
        BigInteger sum;
        String xS = x.toString(); // change input x to a string xS
       
        int lengthOfxS = xS.length();
        int currentTwoBits;
        int i=0; // index
        if(lengthOfxS % 2 != 0) {// if odd length, add a dummy bit
            xS = "0".concat(xS); // add 0 to the front of string xS
            lengthOfxS++;
        }
            
        while(i < lengthOfxS){ // go through xS two by two, left to right
            currentTwoBits = Integer.valueOf(xS.substring(i,i+2));
            i += 2;
           
            // sum = currentSum*100 + currentTwoBits
            sum = currentSum.multiply(BigInteger.valueOf(100));
            sum = sum.add(BigInteger.valueOf(currentTwoBits));
            // subtraction loop
            do {
                currentSum = sum; // remember the value before subtract
                // in next 3 lines, we work out currentRes = sum - 2*currentRes - 1
                sum = sum.subtract(currentRes);
                currentRes = currentRes.add(BigInteger.valueOf(1)); // currentRes++
                sum = sum.subtract(currentRes);
               
            } while(sum.compareTo(BigInteger.valueOf(0)) >= 0); // stop when sum < 0
            currentRes = currentRes.subtract(BigInteger.valueOf(1)); // go one step back
            currentRes = currentRes.multiply(BigInteger.valueOf(10));
        }
        s = currentRes.divide(BigInteger.valueOf(10)); // go one step back
        return s;

}

    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
