/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.math.BigInteger;
import java.util.*;
/**
 *
 * @author jt2-friend
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Factorise");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dixonFactorise(new BigInteger(jTextField1.getText()));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    
    public void dixonFactorise(BigInteger val) {
        
        BigInteger a, n, b, c, poss, x, xSqrd;
        n = val;
        
        x = new BigInteger(String.valueOf(getIntSqrt(val)));
        poss = new BigInteger("75");
        xSqrd = new BigInteger("0");
        b = new BigInteger("1");
        
        System.out.println(n);
        
        int smoothNums[] = {2,3,5,7};
        int smoothCalcPow[] = {0,0,0,0};
//        List possSmooth = new ArrayList();
        List<List<String>> possSmoothList = new ArrayList<List<String>>(); 
        List<String> possSmoothSet = null;
        
        int i;
        int countNumOfValues = 0;
        outerloop:
        for (i = 0; i < 100000000; i++){
            xSqrd = x.multiply(x);
            System.out.println("start");
            System.out.println(xSqrd);
            poss = xSqrd.mod(n);
            System.out.println(poss);
            
            for (int sevenPow = 0; sevenPow < 4 ; sevenPow++) {
                for (int fivePow = 0; fivePow < 4 ; fivePow++) {
                    for (int threePow = 0; threePow < 4 ; threePow++) {
                        for (int twoPow = 0; twoPow < 4 ; twoPow++) {
//                            double num2 = Math.pow(smoothNums[0], twoPow);
//                            double num3 = Math.pow(smoothNums[1], threePow);
//                            double num5 = Math.pow(smoothNums[2], fivePow);
//                            double num7 = Math.pow(smoothNums[3], sevenPow);
                            double calc = Math.pow(smoothNums[0], twoPow) * 
                                          Math.pow(smoothNums[1], threePow) *
                                          Math.pow(smoothNums[2], fivePow) *
                                          Math.pow(smoothNums[3], sevenPow);
//                            System.out.println(Double.toString(num2) + " x " +
//                                               Double.toString(num3) + " x " + 
//                                               Double.toString(num5) + " x " + 
//                                               Double.toString(num7));
                            int calcInt = (int) calc;
//                            System.out.println(Integer.toString(calcInt));
                            if (BigInteger.valueOf(calcInt).equals(poss)) {
                                possSmoothSet.add(String.valueOf(twoPow) +
                                               String.valueOf(threePow) +
                                               String.valueOf(fivePow) +
                                               String.valueOf(sevenPow));
                                possSmoothList.add(possSmoothSet);
//                                    smoothCalcPow[0] = twoPow;
//                                    smoothCalcPow[1] = threePow;
//                                    smoothCalcPow[2] = fivePow;
//                                    smoothCalcPow[3] = sevenPow;
//                                    break outerloop;
                            }
                            for (int m = 0; m < possSmoothList.size(); m++) {
                                int powerTotal = Integer.valueOf(possSmoothList.get(m).get(0)) +
                                                 Integer.valueOf(possSmoothList.get(m).get(1)) +
                                                 Integer.valueOf(possSmoothList.get(m).get(2)) +
                                                 Integer.valueOf(possSmoothList.get(m).get(3));
                                if (powerTotal % 2 == 0) {
                                    
                                }
                            }
                            
                        }
                    }
                }
            }

            x = x.add(b);
            System.out.println(x);
        }
        
        
        System.out.println("Poss");
        System.out.println(poss);
        System.out.println(possSmooth);
        printArray(smoothCalcPow);
 
        
        
        jTextArea1.append(String.valueOf(getIntSqrt(val)));

        //need to make struct to store a and possA;
    }
    
    /*  printArray
    * Params : int[] arr
    * Returns : void
    * Desc : prints array to terminal, useful for testing
    */
    public void printArray(int[] arr) {
        for (int i = 0; i < (arr.length); i++) {
            System.out.println(arr[i]);
        }
    }
    
    public Boolean PerfectSquare(BigInteger A) {
        Boolean p = false;
        BigInteger B = getIntSqrt(A);
        BigInteger C = B.multiply(B);
        if (C.equals(A)){
            p = true;
        }
        
        return p;
    }
    
    public BigInteger getIntSqrt(BigInteger x){
        BigInteger s; // final result 
        BigInteger currentRes = BigInteger.valueOf(0); // init value is 0
        BigInteger currentSum = BigInteger.valueOf(0); // init value is 0
        BigInteger sum = BigInteger.valueOf(0);
        String xS = x.toString(); // change input x to a string xS
       
        int lengthOfxS = xS.length();
        int currentTwoBits;
        int i=0; // index
        if(lengthOfxS % 2 != 0) {// if odd length, add a dummy bit
            xS = "0".concat(xS); // add 0 to the front of string xS
            lengthOfxS++;
        }
            
        while(i < lengthOfxS){ // go through xS two by two, left to right
            currentTwoBits = Integer.valueOf(xS.substring(i,i+2));
            i += 2;
           
            // sum = currentSum*100 + currentTwoBits
            sum = currentSum.multiply(BigInteger.valueOf(100));
            sum = sum.add(BigInteger.valueOf(currentTwoBits));
            // subtraction loop
            do {
                currentSum = sum; // remember the value before subtract
                // in next 3 lines, we work out currentRes = sum - 2*currentRes - 1
                sum = sum.subtract(currentRes);
                currentRes = currentRes.add(BigInteger.valueOf(1)); // currentRes++
                sum = sum.subtract(currentRes);
               
            } while(sum.compareTo(BigInteger.valueOf(0)) >= 0); // stop when sum < 0
            currentRes = currentRes.subtract(BigInteger.valueOf(1)); // go one step back
            currentRes = currentRes.multiply(BigInteger.valueOf(10));
        }
        s = currentRes.divide(BigInteger.valueOf(10)); // go one step back
        return s;

}

    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
