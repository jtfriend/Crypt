
/**
 *
 * @author jt2-friend
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        label4 = new java.awt.Label();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBar(null);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Verify1");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Clear");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        label2.setName(""); // NOI18N
        label2.setText("Recieving Code");

        label3.setText("Error Count");

        jScrollPane2.setHorizontalScrollBar(null);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jScrollPane3.setHorizontalScrollBar(null);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jScrollPane4.setHorizontalScrollBar(null);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        label4.setName(""); // NOI18N
        label4.setText("Fixed Code");

        jScrollPane5.setHorizontalScrollBar(null);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane5.setViewportView(jTextArea5);

        label5.setText("Syndromes");

        label6.setText("P Q R");

        label7.setText("I J A B");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(jButton3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addGap(47, 47, 47)
                .addComponent(jButton3)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        jTextField2.setText("");
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
        jTextArea4.setText("");
        jTextArea5.setText("");
        
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        bch();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public static boolean isNumeric(String strNum) {
        return strNum.matches("-?\\d+(\\.\\d+)?");
    }
    
    public void bch() {
        int[] int_recieved_digits = new int [10];
        int[] fixedCode = new int[10];
        int[] syndromes = new int [4];
        int[] PQR = new int [3];
        int[] IJAB = new int [4];
        int errorCount = 0;

        String str_recieved_digits;
        //Recieved inputted string
        str_recieved_digits = jTextField2.getText();
        
        //Verify the input is correct
        if (str_recieved_digits.length() != 10) {
            jTextArea1.setText("Not correct length");
            return;
        } else if (!isNumeric(str_recieved_digits)){
            jTextArea1.setText("Input numbers please");
            return;
        }
        
        //intialise array
        for (int i = 0; i < 10; i++) {
            int_recieved_digits[i] = 0;
        }
        
        //Set int array with input values
        for (int i = 0; i < 10; i++) {
            int_recieved_digits[i] = Integer.parseInt(String.valueOf(str_recieved_digits.charAt(i)));
        }
        
        String pqr = "";
        String ijab = "";
        String fixedCodeStr = "";
        String digits = "";
        
        //Generate codes
        syndromes = generateSyndromes(int_recieved_digits);
        PQR = generatePQR(syndromes);
        IJAB = generateIJAB(PQR, syndromes);
        
        //Calculate error count
        errorCount = countErrors(syndromes, PQR, IJAB, int_recieved_digits);

        
        if (errorCount == 0){
            fixedCode = int_recieved_digits;
        } else {
            fixedCode = fixCode(int_recieved_digits, IJAB);
            for (int i = 0; i < fixedCode.length; i++) {
                if (fixedCode[i] > 9) {
                    errorCount = 3;
                }
            }
        }
        
        //Set print out variables
        for (int i = 0; i < 4; i++) {
            digits += syndromes[i];
            digits += ", ";
        }
        
        for (int i = 0; i < 3; i++) {
            pqr += PQR[i];
            pqr += ", ";
        }
        
        for (int i = 0; i < 4; i++) {
            ijab += IJAB[i];
            ijab += ", ";
        }
        
        for (int i = 0; i < 10; i++) {
            fixedCodeStr += fixedCode[i];
        }

        //Print to textboxes
        jTextArea1.setText(Integer.toString(errorCount));
        jTextArea2.setText(digits);
        jTextArea3.setText(pqr);
        jTextArea4.setText(ijab);
        jTextArea5.setText(fixedCodeStr);
    }
    
    public int countErrors(int[] s, int[] PQR, int[] IJAB, int[] int_recieved_digits) {
        int errorCount = 0;
        if (s[0] == 0 && s[1] == 0 && s[2] == 0 && s[3] == 0 ){
            errorCount = 0;
            return errorCount;
        }
        if (PQR[0] == 0 && PQR[1] == 0 && PQR[2] == 0){
            errorCount = 1;
        } else {

            if (checkForThreeErrors(PQR, IJAB) == 1){
                errorCount = 3;
            } else {
                errorCount = 2;
            }
        }

        return errorCount;
    }
    
    
    /*  generateParityBits
    * Params : int d
    * Returns : int[]
    * Desc : Generates parity bits
    */
    public int[] generateParityBits(int[] d){
        d[6] = (4*d[0] + 10*d[1] + 9 * d[2] + 2 * d[3] + d[4] + 7*d[5]) % 11;
        d[7] = (7*d[0] + 8*d[1] + 7*d[2] + d[3] + 9*d[4] + 6*d[5]) % 11;
        d[8] = (9*d[0] + d[1] + 7*d[2] + 8*d[3] + 7*d[4] + 7*d[5]) % 11;
        d[9] = (d[0] + 2*d[1] + 9*d[2] + 10*d[3] + 4*d[4] + d[5]) % 11;

        return d;
    }
    
    /*  generateSyndromes
    * Params : int digits
    * Returns : int[]
    * Desc : Generates all syndromes
    */
    public int[] generateSyndromes(int[] digits){
        int[] syndromes = new int [4];
        
        //s1
        syndromes[0] = (digits[0] + digits[1] + digits[2] + digits[3] + digits[4] +
                digits[5] + digits[6] + digits[7] + digits[8] + digits[9]) 
                % 11;
        //s2
        syndromes[1] = (digits[0] + (2 * digits[1]) + (3* digits[2]) + (4 * digits[3]) 
                + (5 * digits[4]) + (6* digits[5]) + (7 * digits[6]) + 
                (8*digits[7]) + (9*digits[8]) + (10 * digits[9])) % 11;
        //s3
        syndromes[2] = (digits[0] + (4 * digits[1]) + (9*digits[2])+ (5*digits[3]) + 
                (3 * digits[4]) + (3* digits[5]) + (5*digits[6]) + 
                (9 * digits[7]) + (4 * digits[8]) + digits[9]) % 11;
        //s4
        syndromes[3] = (digits[0] + (8*digits[1]) + (5*digits[2]) + (9*digits[3]) + 
                (4* digits[4]) + (7*digits[5]) + (2*digits[6]) + (6 * digits[7])
                + (3 * digits[8]) + (10*digits[9])) % 11;

        return syndromes;
    }

    /*  generatePQR
    * Params : int syndromes
    * Returns : int[]
    * Desc : Generates P,Q and R from the given syndromes
    */
    public int[] generatePQR(int[] syndromes){
        
        int[] PQRarr = new int [3];
        int p = mod11fix((syndromes[1] * syndromes[1]) - (syndromes[0] * syndromes[2]));
        int q = mod11fix((syndromes[0] * syndromes[3]) - (syndromes[1] * syndromes[2]));
        int r = mod11fix((syndromes[2] * syndromes[2]) - (syndromes[1] * syndromes[3]));
        
        PQRarr[0] = p;
        PQRarr[1] = q;
        PQRarr[2] = r;
       
        return PQRarr;
    }
    
    /*  mod11fix
    * Params : int val
    * Returns : int
    * Desc : Fixes any number to be non zero and less
    *        than 11
    */
    public int mod11fix(int val) {
        while (val < 0) {
            val = val + 11;
        }
        val = val % 11;

        return val;
    }
    
    /*  modDivision
    * Params : int val
    * Returns : int
    * Desc : mod11 division
    */
    public int modDivision(int val) {
        int testVal = 0;
        for (int i = 0; i < 11; i++) {
            testVal = val * i;
            
            if (testVal % 11 == 1) {
                return i;
            }
        }

        return 0;
    }
    
    /*  fixCode
    * Params : int [] originalCode, int [] IJAB
    * Returns : int[]
    * Desc : Fixes the incorrect digits in the code 
    */
    public int[] fixCode(int [] originalCode, int [] IJAB) {
        int pos_1 = IJAB[0];
        int pos_2 = IJAB[1];
        int mag_1 = IJAB[2];
        int mag_2 = IJAB[3];
        
        if (pos_1 > 0) {
            originalCode[pos_1 - 1] = mod11fix(originalCode[pos_1 - 1] - mag_1);
        }

        if (pos_2 > 0) {
            originalCode[pos_2 - 1] = mod11fix(originalCode[pos_2 - 1] - mag_2);
        }
        
        return originalCode;
    }
    
    /*  generateIJAB
    * Params : int[] PQR, int[] syndromes
    * Returns : int[]
    * Desc : generates IJ and AB values
    */
    public int[] generateIJAB(int[] PQR, int[] syndromes){
        
        int[] IJAB = new int [4];
        int p = PQR[0];
        int q = PQR[1];
        int r = PQR[2];
        
        //if p,q and r are zero, set syndromes equal
        if (p == 0 && q == 0 && r == 0) {
            IJAB[0] = syndromes[1] / (syndromes[0] == 0 ? 1: syndromes[0]);
            IJAB[2] = syndromes[0];
        } else {
            //Otherwise put values into quadratic equation
            int firstPiece = q;
            int secondPiece = squareRoot(mod11fix((q*q) - (4 * p * r)));
            int lastPiece = mod11fix(2 * p);
            int i = mod11fix( -firstPiece + secondPiece) * modDivision(lastPiece);
            int j = mod11fix( -firstPiece - secondPiece) * modDivision(lastPiece);

            int b = ((mod11fix(i * syndromes[0])) - syndromes[1]) * modDivision(mod11fix(i - j));
            int a = syndromes[0] - b;

            IJAB[0] = mod11fix(i);
            IJAB[1] = mod11fix(j);
            IJAB[2] = mod11fix(a);
            IJAB[3] = mod11fix(b);
        }
       
        return IJAB;
    }
    
    /*  printArray
    * Params : int[] arr
    * Returns : void
    * Desc : prints array to terminal, useful for testing
    */
    public void printArray(int[] arr) {
        for (int i = 0; i < (arr.length); i++) {
            System.out.println(arr[i]);
        }
    }
    
    /*  checkForThreeErrors
    * Params : int[] PQR, int[] IJAB
    * Returns : int
    * Desc : Checks if the code has 3 errors
    */
    public int checkForThreeErrors(int[] PQR, int[] IJAB) {
        int p = PQR[0];
        int q = PQR[1];
        int r = PQR[2];
        
        //Squareroot fails return 1
        if (squareRoot(mod11fix((q*q) - (4 * p * r))) == -1) {
            return 1;
        }
        //if i or j are 0 return 0
        if (IJAB[0] == 0 || IJAB[1] == 0){
            return 1;
        }
        
        return 0;
    }
    
    /*  squareRoot
    * Params : int val
    * Returns : int
    * Desc : Checks number has given number has a square root
    *        under mod 11
    */
    public int squareRoot(int val){
        int squareNumber = 0;
        
        for (int i = 0; i< 20; i++) {
            squareNumber = i*i;
            if (squareNumber % 11 == val) {
                return i;
            }
        }

        return -1;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextField jTextField2;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    // End of variables declaration//GEN-END:variables
}
